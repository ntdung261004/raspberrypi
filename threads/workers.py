# threads/workers.py

from threading import Thread
import queue
import time
import requests
import evdev
from evdev import ecodes
from datetime import datetime

# Import c√°c bi·∫øn v√† h√†m c·∫ßn thi·∫øt t·ª´ c√°c module kh√°c
from utils.audio import play_event_sound
# <<< TH√äM M·ªöI: Import bi·∫øn CALIBRATED_CENTER t·ª´ main.py >>>
# ƒê√¢y l√† m·ªôt c√°ch ƒë·ªÉ lu·ªìng ph·ª• c√≥ th·ªÉ truy c·∫≠p bi·∫øn c·ªßa lu·ªìng ch√≠nh
import __main__ as main_module

class SenderWorker(Thread):
    def __init__(self, frame_queue, server_url):
        super().__init__()
        self.frame_queue = frame_queue
        self.server_url = server_url
        self.daemon = True
        self.running = True

    def run(self):
        while self.running:
            try:
                if not main_module.SERVER_IS_CONNECTED:
                    time.sleep(1)
                    continue

                jpg_buffer = self.frame_queue.get_nowait()
                try:
                    requests.post(f"{self.server_url}/video_upload", data=jpg_buffer, headers={'Content-Type': 'image/jpeg'}, timeout=(2, 5))
                except requests.exceptions.RequestException as e:
                    # <<< THAY ƒê·ªîI: Ch·ªß ƒë·ªông b√°o m·∫•t k·∫øt n·ªëi >>>
                    if main_module.SERVER_IS_CONNECTED:
                        print("‚ÄºÔ∏è L·ªñI SENDER: M·∫•t k·∫øt n·ªëi khi g·ª≠i video. T·∫°m d·ª´ng.")
                        main_module.SERVER_IS_CONNECTED = False
                finally:
                    self.frame_queue.task_done()
            except queue.Empty:
                time.sleep(0.01)
                continue
                
    def stop(self):
        self.running = False

class CommandPoller(Thread):
    def __init__(self, command_queue, server_url):
        super().__init__()
        self.command_queue = command_queue
        self.server_url = server_url
        self.daemon = True
        self.running = True
        self.last_server_heartbeat = 0

    def run(self):
        while self.running:
            try:
                response = requests.get(f"{self.server_url}/get_command", timeout=1.0)
                if response.status_code == 200:
                    data = response.json()
                    if data.get('timestamp'):
                        if not main_module.SERVER_IS_CONNECTED:
                            print("‚úÖ Kh√¥i ph·ª•c k·∫øt n·ªëi t·ªõi server!")
                        main_module.SERVER_IS_CONNECTED = True
                        self.last_server_heartbeat = time.time()
                    
                    command = data.get('command')
                    if command:
                        self.command_queue.put(command)

            except requests.exceptions.RequestException:
                # <<< THAY ƒê·ªîI: Ch·ªß ƒë·ªông b√°o m·∫•t k·∫øt n·ªëi n·∫øu c·∫ßn >>>
                if time.time() - self.last_server_heartbeat > 5: # R√∫t ng·∫Øn th·ªùi gian ch·ªù xu·ªëng 5s
                    if main_module.SERVER_IS_CONNECTED:
                        print("‚ÄºÔ∏è L·ªñI POLLER: M·∫•t k·∫øt n·ªëi. T·∫°m d·ª´ng.")
                        main_module.SERVER_IS_CONNECTED = False
            
            time.sleep(2) # TƒÉng th·ªùi gian h·ªèi l·ªánh ƒë·ªÉ gi·∫£m t·∫£i m·∫°ng
            
    def stop(self):
        self.running = False

class TriggerListener(Thread):
    def __init__(self, processing_queue, ring_buffer):
        super().__init__()
        self.processing_queue = processing_queue
        self.ring_buffer = ring_buffer
        self.daemon = True
        self.running = True
        self.device = None
        self.device_name_keyword = "AB Shutter3" # Thay b·∫±ng t√™n remote c·ªßa b·∫°n

    def find_trigger_device(self):
        devices = [evdev.InputDevice(path) for path in evdev.list_devices()]
        for device in devices:
            if self.device_name_keyword.lower() in device.name.lower():
                print(f"‚úÖ ƒê√£ t√¨m th·∫•y thi·∫øt b·ªã trigger: {device.name} t·∫°i {device.path}")
                return device
        return None

    def run(self):
        print("üéß Lu·ªìng TriggerListener b·∫Øt ƒë·∫ßu ho·∫°t ƒë·ªông...")
        while self.running:
            try:
                if self.device is None:
                    self.device = self.find_trigger_device()
                    if self.device is None:
                        print(f"üîé Kh√¥ng t√¨m th·∫•y trigger, ƒëang t√¨m ki·∫øm l·∫°i sau 5 gi√¢y...")
                        time.sleep(5)
                        continue
                    else:
                         self.device.grab()
                         print(f"‚úÖ Gi√†nh quy·ªÅn ki·ªÉm so√°t {self.device.name}. B·∫Øt ƒë·∫ßu l·∫Øng nghe...")

                for event in self.device.read():
                    if event.type == ecodes.EV_KEY and event.code == ecodes.KEY_VOLUMEDOWN and event.value == 1:
                        capture_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        print(f"üì∏ (BT Trigger) Ch·ª•p ·∫£nh l√∫c {capture_time}...")
                        play_event_sound(-3)

                        # Truy c·∫≠p bi·∫øn CALIBRATED_CENTER ƒë∆∞·ª£c truy·ªÅn v√†o t·ª´ main
                        if len(self.ring_buffer) > 0 and not self.processing_queue.full():
                            frame_to_process = self.ring_buffer[0]
                            # C·∫ßn truy c·∫≠p CALIBRATED_CENTER, s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong main.py
                            self.processing_queue.put((frame_to_process.copy(), capture_time, main_module.CALIBRATED_CENTER))

            except BlockingIOError:
                time.sleep(0.05)
                continue
            except (IOError, OSError) as e:
                print(f"‚ö†Ô∏è Thi·∫øt b·ªã trigger ƒë√£ b·ªã ng·∫Øt k·∫øt n·ªëi: {e}. ƒêang t√¨m ki·∫øm l·∫°i...")
                if self.device:
                    try: self.device.close()
                    except: pass
                self.device = None
                time.sleep(2)

    def stop(self):
        print("üîå Y√™u c·∫ßu d·ª´ng TriggerListener...")
        self.running = False